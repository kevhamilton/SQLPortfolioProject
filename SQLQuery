Select *
FROM `sql-covid-project-380700.covid_data.CovidDeaths`
Where continent is not null
ORDER BY 3,4 
LIMIT 10;

SELECT *
FROM sql-covid-project-380700.covid_data.CovidVaccinations
Where continent is not null
ORDER BY 3,4
LIMIT 10;

SELECT Location, date, total_cases, new_cases, total_deaths, population
FROM sql-covid-project-380700.covid_data.CovidDeaths
Where continent is not null
ORDER BY 1,2;

#looking at Total Cases vs Total Deaths
#shows the likelihood of dying if you contract Covid in a specific country

SELECT Location, date, total_cases, total_deaths, (total_deaths/total_cases)*100 as DeathPercentage
FROM sql-covid-project-380700.covid_data.CovidDeaths
WHERE location like '%States%'
AND continent is not null
ORDER BY 1,2;

#Looking at the Total Cases by Population
#Shows what percentage of population contracted Covid

SELECT Location, date, total_cases, Population, (total_cases/population)*100 as PercentPopulationInfected
FROM sql-covid-project-380700.covid_data.CovidDeaths
WHERE location like '%States%'
AND continent is not null
ORDER BY 1,2;

#Looking at Countries with Highest Infection Rate compared to Population

SELECT Location, Population, MAX(total_cases) as HighestInfectionCount, MAX((total_cases/population))*100 as PercentPopulationInfected
FROM sql-covid-project-380700.covid_data.CovidDeaths
#Where location like '%States%'
WHERE continent is not null
GROUP BY Location, Population
ORDER BY PercentPopulationInfected desc;

#Showing Countries with Highest Death Count per Population

SELECT Location, MAX(total_deaths) as TotalDeathCount
FROM sql-covid-project-380700.covid_data.CovidDeaths
WHERE continent is not null
GROUP BY Location
ORDER BY TotalDeathCount desc;

#Breaking up the data by continent

SELECT location, MAX(total_deaths) as TotalDeathCount
FROM sql-covid-project-380700.covid_data.CovidDeaths
WHERE continent is null
GROUP BY location
ORDER BY TotalDeathCount desc;

#Showing the continents with the highest death counts

SELECT location, MAX(total_deaths) as TotalDeathCount
FROM sql-covid-project-380700.covid_data.CovidDeaths
WHERE continent is null
GROUP BY location
ORDER BY TotalDeathCount desc;

#Global Numbers of total death rate

SELECT SUM(new_cases) as total_cases, SUM(new_deaths) as total_deaths, SUM(new_deaths)/SUM(new_cases)*100 as GlobalDeathPercentage
FROM sql-covid-project-380700.covid_data.CovidDeaths
--WHERE location like '%States%'
WHERE continent is not null
ORDER BY 1,2;

--Looking at Total Population vs Vaccinations
--Partition By command is useful because it does a sum of the total vaccinations for each country, instead of continuing the sum as it reads lines for different countries. 
--I did not have to cast some of the columns as integers, becasue the data set I downloaded has already been edited to be integers

SELECT dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations, 
  SUM(new_vaccinations) OVER (partition by dea.location ORDER BY dea.location,
  dea.date) as RollingPeopleVaccinated,
--(RollingPeopleVaccinated/population)*100
FROM sql-covid-project-380700.covid_data.CovidDeaths dea
JOIN sql-covid-project-380700.covid_data.CovidVaccinations vac
  ON dea.location = vac.location
  AND dea.date = vac.date
  WHERE dea.continent is not null
ORDER BY 2, 3;

--USE CTE
--Syntax seems different in BigQuery
--around 1:04:00

--With PopvsVac (continent, location, date, population, new_vaccinations, RollingPeopleVaccinated)
--as
--(
--  SELECT dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations, 
--  SUM(new_vaccinations) OVER (partition by dea.location ORDER BY dea.location,
--  dea.date) as RollingPeopleVaccinated,
--(RollingPeopleVaccinated/population)*100
--FROM sql-covid-project-380700.covid_data.CovidDeaths dea
--JOIN sql-covid-project-380700.covid_data.CovidVaccinations vac
--  ON dea.location = vac.location
--  AND dea.date = vac.date
--  WHERE dea.continent is not null
--ORDER BY 2, 3;
--)


--TEMP TABLE
--Not supported in the free tier of BigQuery

CREATE TEMP TABLE PercentPopulationVaccinated
(
  Continent string,
  location string,
  date datetime,
  population numeric,
  new_vaccinations numeric,
  RollingPeopleVaccinated numeric
);

INSERT INTO PercentPopulationVaccinated
 SELECT dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations, 
  SUM(new_vaccinations) OVER (partition by dea.location ORDER BY dea.location,
  dea.date) as RollingPeopleVaccinated,
--(RollingPeopleVaccinated/population)*100
FROM sql-covid-project-380700.covid_data.CovidDeaths dea
JOIN sql-covid-project-380700.covid_data.CovidVaccinations vac
  ON dea.location = vac.location
  AND dea.date = vac.date
  WHERE dea.continent is not null;
--ORDER BY 2, 3;

SELECT *, (RollingPeopleVaccinated/Population)*100
FROM PercentPopulationVaccinated;

--CREATING VIEW to store data for later visualization
--BigQuery does not support creating a view by a user-defined temp table

CREATE VIEW PercentPopulationVaccinated as
SELECT dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations, 
  SUM(new_vaccinations) OVER (partition by dea.location ORDER BY dea.location,
  dea.date) as RollingPeopleVaccinated,
--(RollingPeopleVaccinated/population)*100
FROM sql-covid-project-380700.covid_data.CovidDeaths dea
JOIN sql-covid-project-380700.covid_data.CovidVaccinations vac
  ON dea.location = vac.location
  AND dea.date = vac.date
  WHERE dea.continent is not null;
--ORDER BY 2, 3;
